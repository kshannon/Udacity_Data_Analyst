#   scale_x_continuous(limits = c(0, 15000), breaks = seq(0, 15000, 5000))
qplot(x = www_likes, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)),
xlab = 'www_likes count',
ylab = 'proportion of users with that many likes',
geom = 'freqpoly', color = gender) +
scale_x_continuous() +
scale_x_log10()
table(pf$gender)
by(pf$www_likes, pf$gender, sum)
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender) +
)
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender)
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender) +
scale_x_continuous(limits = c(0, 1000)
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender) +
scale_x_continuous(limits = c(0, 1000))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender) +
scale_y_continuous(limits = c(0, 1000))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender, ylim = c(0,1000))
#### Adjust the code to focus on users who have friend counts between 0 and 1000.
```{r}
# qplot(x = gender, y = friend_count,
#       data = subset(pf, !is.na(gender)),
#       geom = 'boxplot', color = gender) +
#   scale_y_continuous(limits = c(0, 1000))
# qplot(x = gender, y = friend_count,
#       data = subset(pf, !is.na(gender)),
#       geom = 'boxplot', color = gender, ylim = c(0,1000))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender) +
coor_cartesian(ylim = c(0, 1000))
# qplot(x = gender, y = friend_count,
#       data = subset(pf, !is.na(gender)),
#       geom = 'boxplot', color = gender) +
#   scale_y_continuous(limits = c(0, 1000))
# qplot(x = gender, y = friend_count,
#       data = subset(pf, !is.na(gender)),
#       geom = 'boxplot', color = gender, ylim = c(0,1000))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender) +
coord_cartesian(ylim = c(0, 1000))
# qplot(x = gender, y = friend_count,
#       data = subset(pf, !is.na(gender)),
#       geom = 'boxplot', color = gender) +
#   scale_y_continuous(limits = c(0, 1000))
# qplot(x = gender, y = friend_count,
#       data = subset(pf, !is.na(gender)),
#       geom = 'boxplot', color = gender, ylim = c(0,1000))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender) +
coord_cartesian(ylim = c(0, 250))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender) +
coord_cartesian(ylim = c(0, 250))
by(pf$friend_count, pf$gender, summary)
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender) +
coord_cartesian(ylim = c(0, 250))
by(pf$friend_count, pf$gender, summary)
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender) +
coord_cartesian(ylim = c(0, 500))
by(pf$friend_count, pf$gender, summary)
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender) +
coord_cartesian(ylim = c(0, 150))
by(pf$friend_count, pf$gender, summary)
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', color = gender) +
coord_cartesian(ylim = c(0, 150))
by(pf$friendships_initiated, pf$gender, summary)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
mobile_check_in <- NA
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
mobile_check_in <- NA
pf$mobile_check_in <- ifelse (pf$mobile_likes > 0, 1, 0)
pf$mobile_check_in <- factor (pf$mobile_check_in)
View(pf)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
mobile_check_in <- NA
pf$mobile_check_in <- ifelse (pf$mobile_likes > 0, 1, 0)
pf$mobile_check_in <- factor (pf$mobile_check_in)
summary(pf$mobile_check_in)
mobile_check_in.length()
length(mobile_check_in)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
mobile_check_in <- NA
pf$mobile_check_in <- ifelse (pf$mobile_likes > 0, 1, 0)
pf$mobile_check_in <- factor (pf$mobile_check_in)
summary(pf$mobile_check_in)
sum(pf$mobile_check_in ==1)/ length(pf$mobile_check_in)
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data(diamonds)
View(pf)
# Set up ggplot libraru and load included diamonds library
library(ggplot2)
data(diamonds)
summary(diamonds)
?diamonds
diamonds$color
View(diamonds)
price(diamonds)
# qplot(x = proice, data = diamonmds) +
#   scale_x_continuous(breaks=1:31) +
#   facet_wrap(~dob_month, ncol = 3)
# install.packages('ggplot2')
# library(ggplot2)
names(pf)
# qplot(x = dob_day, data = pf) +
#   scale_x_continuous(breaks=1:31) +
#   facet_wrap(~dob_month, ncol = 3)
names(diamonds)
qplot(x = proice, data = diamonmds) +
scale_x_continuous(breaks=1:31) +
facet_wrap(~dob_month, ncol = 3)
names(diamonds)
qplot(x = price, data = diamonmds)
# scale_x_continuous(breaks=1:31) +
# facet_wrap(~dob_month, ncol = 3)
names(diamonds)
qplot(x = price, data = diamonds)
# scale_x_continuous(breaks=1:31) +
# facet_wrap(~dob_month, ncol = 3)
names(diamonds)
qplot(x = price, data = diamonds) +
scale_x_continuous() +
facet_wrap(~dob_month, ncol = 3)
names(diamonds)
qplot(x = price, data = diamonds)
names(diamonds)
qplot(x = price, data = diamonds)
summary(diamonds$price)
less250 <- 0
#less250 <- ifelse (diamonds$price <500 +1)
less250 <- 0
less250 <- ifelse (diamonds$price <500 +1)
ggplot(aes(x = tenure / 365), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 7, 1), limits = c(0, 7)) +
xlab('Number of years using Facebook') +
ylab('Number of users in sample')
names(diamonds)
qplot(x = price, data = diamonds)
summary(diamonds$price)
qplot(x = price, data = diamonds) +
scale_x_continuous(breaks = seq(0, 500, 250)
qplot(x = price, data = diamonds) +
scale_x_continuous(breaks = seq(0, 500, 250))
qplot(x = price, data = diamonds) +
scale_x_continuous(breaks = seq(1, 500, 250))
qplot(x = price, data = diamonds) +
scale_x_continuous(breaks = seq(1, 500, 250),limits = c(0, 500)) )
qplot(x = price, data = diamonds) +
scale_x_continuous(breaks = seq(1, 500, 250),limits = c(0, 500))
qplot(x = price, data = diamonds, binwidth = 500) +
scale_x_continuous(breaks = seq(1, 500, 250),limits = c(0, 500))
qplot(x = price, data = diamonds, binwidth = 500) +
scale_x_continuous(breaks = seq(1, 500, 2),limits = c(0, 500))
qplot(x = price, data = diamonds, binwidth = 500) +
scale_x_continuous(breaks = seq(1, 500, 100),limits = c(0, 500))
qplot(x = price, data = diamonds, binwidth = 500) +
scale_x_continuous(breaks = seq(0, 500, 100),limits = c(0, 500))
qplot(x = price, data = diamonds, binwidth = 100) +
scale_x_continuous(breaks = seq(0, 500, 100),limits = c(0, 500))
qplot(x = price, data = diamonds, binwidth = 100) +
scale_x_continuous(breaks = seq(0, 500, 100),limits = c(15000, 20000))
qplot(x = price, data = diamonds, binwidth = 100) +
scale_x_continuous(breaks = seq(15000, 20000, 100),limits = c(15000, 20000))
qplot(x = price, data = diamonds, binwidth = 1000) +
scale_x_continuous(breaks = seq(15000, 20000, 100),limits = c(15000, 20000))
qplot(x = price, data = diamonds, binwidth = 2000) +
scale_x_continuous(breaks = seq(15000, 20000, 100),limits = c(15000, 20000))
count(diamonds,'price')
str(diamonds)
less_500 <- subset(diamonds, price < 500)
less_250 <- subset(diamonds, price < 250)
more_15000 <- subset(diamonds, price >= 15000)
print (less_500 <- subset(diamonds, price < 500))
less_250 <- subset(diamonds, price < 250)
more_15000 <- subset(diamonds, price >= 15000)
(less_500 <- subset(diamonds, price < 500))
less_250 <- subset(diamonds, price < 250)
more_15000 <- subset(diamonds, price >= 15000)
less_500 <- subset(diamonds, price < 500))
less_250 <- subset(diamonds, price < 250)
more_15000 <- subset(diamonds, price >= 15000)
less_500 <- subset(diamonds, price < 500)
less_250 <- subset(diamonds, price < 250)
more_15000 <- subset(diamonds, price >= 15000)
names(diamonds)
qplot(x = price, data = diamonds)
summary(diamonds$price)
qplot(x = price, data = diamonds)
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 1000, 100), limits = c(0, 1000)) +
xlab('Price') +
ylab('Number of diamonds')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 1000, 100), limits = c(0, 1500)) +
xlab('Price') +
ylab('Number of diamonds')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(0, 1500, 100), limits = c(0, 1500)) +
xlab('Price') +
ylab('Number of diamonds')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(0, 2000, 100), limits = c(0, 2000)) +
xlab('Price') +
ylab('Number of diamonds')
ggplot(aes(x = price), data = diamonds, binwidth=1) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(0, 2000, 100), limits = c(0, 2000)) +
xlab('Price') +
ylab('Number of diamonds')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(0, 2000, 100), limits = c(0, 2000)) +
xlab('Price') +
ylab('Number of diamonds')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420', binwidth = 1) +
scale_x_continuous(breaks = seq(0, 2000, 100), limits = c(0, 2000)) +
xlab('Price') +
ylab('Number of diamonds')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420', binwidth = 100) +
scale_x_continuous(breaks = seq(0, 2000, 100), limits = c(0, 2000)) +
xlab('Price') +
ylab('Number of diamonds')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420', binwidth = 10) +
scale_x_continuous(breaks = seq(0, 2000, 100), limits = c(0, 2000)) +
xlab('Price') +
ylab('Number of diamonds')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420', binwidth = 10) +
scale_x_continuous(breaks = seq(0, 2000, 100), limits = c(0, 2000)) +
xlab('Price') +
ylab('Number of diamonds')
ggsave('priceHist_largestPeak.png')
names(diamonds)
qplot(x = price, data = diamonds)
ggsave('priceHist.png')
summary(diamonds$price)
names(diamonds)
qplot(x = price, data = diamonds)
ggsave('fig1_priceHist.png')
summary(diamonds$price)
ggplot(aes(x = price), data = diamonds) +
geom_histogram(color = 'black', fill = '#F79420', binwidth = 10) +
scale_x_continuous(breaks = seq(0, 2000, 100), limits = c(0, 2000)) +
xlab('Price') +
ylab('Number of diamonds')
ggsave('fig2_priceHist_largestPeak.png')
qplot(x = price, data = diamonds) +
facet_wrap(~cut)
ggsave('fig3_priceHistByCut.png')
# ggplot(aes(x = price), data = diamonds) +
#   geom_histogram(color = 'black', fill = '#F79420', binwidth = 10) +
#   scale_x_continuous(breaks = seq(0, 2000, 100), limits = c(0, 2000)) +
#   xlab('Price') +
#   ylab('Number of diamonds')
# ggsave('fig2_priceHist_largestPeak.png')
qplot(x = price, data = diamonds) +
facet_wrap(~cut)
ggsave('fig3_priceHistByCut.png')
table(diamonds$price)
by(pf$price, pf$cut, sum)
qplot(x = price, data = diamonds) +
facet_wrap(~cut)
ggsave('fig3_priceHistByCut.png')
table(diamonds$price)
by(pf$price, pf$cut, summary)
qplot(x = price, data = diamonds) +
facet_wrap(~cut)
ggsave('fig3_priceHistByCut.png')
by(pf$price, pf$cut, summary)
qplot(x = price, data = diamonds) +
facet_wrap(~cut)
ggsave('fig3_priceHistByCut.png')
by(diamonds$price, diamonds$cut, summary)
qplot(x = price, data = diamonds) +
facet_wrap(~cut)
ggsave('fig3_priceHistByCut.png')
by(diamonds$price, diamonds$cut, max)
qplot(x = price, data = diamonds) +
facet_wrap(~cut, scales="free")
ggsave('fig3_priceHistByCutDiffScalesY.png')
qplot(x = price, data = diamonds) +
facet_wrap(~cut, scales="free")
ggsave('fig4_priceHistByCutDiffScalesY.png')
qplot(x = log10(price), data = diamonds) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price), data = diamonds, binwidth=10) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price), data = diamonds, binwidth=1) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price), data = diamonds, binwidth=100) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price/carat), data = diamonds, binwidth=100) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price/carat), data = diamonds, binwidth=10) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price/carat), data = diamonds, binwidth=0.10) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price/carat), data = diamonds, binwidth=0.010) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price/carat), subset(diamonds, !is.na(cut)), binwidth=0.010) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price/carat), subset(diamonds, !is.na(cut)), binwidth=0.010) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price/carat), subset(diamonds, !is.na(cut)), binwidth=0.025) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price/carat), data = subset(diamonds, !is.na(cut)), binwidth=0.025) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price/carat), data = subset(diamonds, !is.na(cut)), binwidth=0.015) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price/carat), data = subset(diamonds, !is.na(cut)), binwidth=0.010) +
facet_wrap(~cut)
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = log10(price/carat), data = subset(diamonds, !is.na(cut)), binwidth=0.010) +
facet_wrap(~cut, scales = "free_y")
ggsave('fig5_priceHistByCut_Log10tran.png')
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(cut)),
geom = 'boxplot', color = cut) +
#coord_cartesian(ylim = c(0, 1000))
ggsave('fig6_price_boxplot_cut.png')
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(cut)),
geom = 'boxplot', color = clarity) +
#coord_cartesian(ylim = c(0, 1000))
ggsave('fig6_price_boxplot_cut.png')
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(cut)),
geom = 'boxplot', color = clarity) +
coord_cartesian(ylim = c(0, 1000))
ggsave('fig6_price_boxplot_cut.png')
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(cut)),
geom = 'boxplot', color = clarity) +
coord_cartesian(ylim = c(250, 800))
ggsave('fig6_price_boxplot_cut.png')
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(cut)),
geom = 'boxplot', color = clarity) +
#coord_cartesian(ylim = c(250, 800))
ggsave('fig6_price_boxplot_cut.png')
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(cut)),
geom = 'boxplot', color = clarity) +
coord_cartesian(ylim = c(250, 1000))
ggsave('fig6_price_boxplot_cut.png')
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(cut)),
geom = 'boxplot', color = clarity) +
coord_cartesian(ylim = c(250, 10000))
ggsave('fig6_price_boxplot_cut.png')
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(cut)),
geom = 'boxplot', color = clarity) +
coord_cartesian(ylim = c(250, 8000))
ggsave('fig6_price_boxplot_cut.png')
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(cut)),
geom = 'boxplot', color = color) +
coord_cartesian(ylim = c(250, 8000))
ggsave('fig6_price_boxplot_cut.png')
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(cut)),
geom = 'boxplot', color = color) +
coord_cartesian(ylim = c(250, 10000))
ggsave('fig6_price_boxplot_cut.png')
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(cut)),
geom = 'boxplot', color = color) +
coord_cartesian(ylim = c(250, 10000))
ggsave('fig6_price_boxplot_cut&color.png')
qplot(x = price, data = diamonds) +
facet_wrap(~cut, scales="free")
ggsave('fig4_priceHistByCutDiffScalesY.png')
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(cut)),
geom = 'boxplot', color = color) +
coord_cartesian(ylim = c(250, 10000))
ggsave('fig6_price_boxplot_cut&color.png')
IQR(subset(diamonds, color = 'D')$price)
IQR(subset(diamonds, color = 'D')$price)
IQR(subset(diamonds, color = 'J')$price)
IQR(subset(diamonds, color = D)$price)
IQR(subset(diamonds, color = J)$price)
IQR(subset(diamonds, color = D)$price)
IQR(subset(diamonds, color = J)$price)
by(diamonds$price,diamonds$color, summary)
IQR help()
help(IQR())
IQR(subset(diamonds, color = D)$price)
IQR(subset(diamonds, color = J)$price)
by(diamonds$price,diamonds$color, IQR)
by(diamonds$price,diamonds$color, summary)
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(cut)),
geom = 'boxplot', color = color) +
coord_cartesian(ylim = c(250, 10000))
ggsave('fig6_price_boxplot_cut&color.png')
qplot(x = carat,
data = subset(diamonds, !is.na(carat)),
xlab = 'carat',
ylab = 'count',
geom = 'freqpoly', color = carat) +
# scale_x_continuous() +
# scale_x_log10()
qplot(x = carat,
data = subset(diamonds, !is.na(carat)),
xlab = 'carat',
ylab = 'count',
geom = 'freqpoly', color = carat)
# scale_x_continuous() +
# scale_x_log10()
qplot(x = carat,
data = subset(diamonds, !is.na(carat)),
# xlab = 'carat',
# ylab = 'count',
geom = 'freqpoly', color = carat)
qplot(x = carat,
data = subset(diamonds, !is.na(carat)),
xlab = 'carat',
ylab = 'count',
geom = 'freqpoly', color = carat)
qplot(x = carat,
data = subset(diamonds, !is.na(carat)), binwidth=1),
xlab = 'carat',
ylab = 'count',
geom = 'freqpoly', color = carat)
qplot(x = carat,
data = subset(diamonds, !is.na(carat), binwidth=1),
xlab = 'carat',
ylab = 'count',
geom = 'freqpoly', color = carat)
qplot(x = carat,
data = subset(diamonds, !is.na(carat), binwidth=100),
xlab = 'carat',
ylab = 'count',
geom = 'freqpoly', color = carat)
qplot(x = carat,
data = subset(diamonds, !is.na(carat), binwidth=.001),
xlab = 'carat',
ylab = 'count',
geom = 'freqpoly', color = carat)
qplot(x = carat,
data = subset(diamonds, !is.na(carat), binwidth=.001),
geom = 'freqpoly', color = carat)
qplot(x = carat,
data = subset(diamonds, !is.na(carat), binwidth=0.1),
geom = 'freqpoly', color = carat)
qplot(x = carat,
data = subset(diamonds, !is.na(carat), binwidth=0.1),
geom = 'freqpoly', color = carat)
carats <- as.data.frame(table(diamonds$carat))
carats[carats$Freq > 2000, ]
names(diamonds)
qplot(x = price, data = diamonds)
ggsave('fig1_priceHist.png')
summary(diamonds$price)
getwd()
setwd("C:/Users/Keil/Documents/GitHub/Udacity_Data_Analyst/project4_R/EDA_Course_Materials/lesson4")
